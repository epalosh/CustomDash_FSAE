//Code by Ethan Palosh
//for USC Racing

//LCD Screen Library
/*
  Universal 8bit Graphics Library, https://github.com/olikraus/u8glib/
*/

//notes:
/*
  screen width: 240px
*/


#include "U8glib.h"
#include "math.h"

#include "Canbus.h"  // for CAN functionality
#include "defaults.h"
#include "global.h"
#include "mcp2515.h"
#include "mcp2515_defs.h"
#include "stdlib.h"

#include <SoftwareSerial.h> //maybe need?

#include "Adafruit_NeoPixel.h" //for LED stuff later...


// 8Bit Com: D0..D7: 2,3,4,5,6,7,8,9, cs=10, C/D=A5, wr=12, rd=11, reset=13
U8GLIB_T6963_240X64 u8g(0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 9);
//void draw(void);

//number variables for math
int voltsInt = 0;
int voltsDec = 0;
int rpmWidth = 0;

//C* variables for output
char rpmStr[10];
char batteryVoltageStr[16];
char coolantFStr[15];
char oilPressureStr[11];



/////////////////////////////////////////////////////////////
//CAN STUFF
/////////////////////////////////////////////////////////////

//Start at page 262:
//https://www.jegs.com/InstallationInstructions/0/017/017-30-7106.pdf

/* MESSAGE IDS:

  MESSAGE_ONE:
  bytes 0 and 1 --> engine speed --> scale by .39063 rpm/bit
  bytes 2 and 3 --> engine load --> scale by .0015259 % / bit
  bytes 4 and 5 --> throttle --> scale by .0015259 % / bit
  byte 6 --> air temp --> no scale, 1 bit = 1 deg c
  byte 7 --> coolant temp --> no scale, 1 bit = 1 deg c

  MESSAGE_TWO:
  analog sensors --> 2 bytes for each sensor --> each scaled by .00007782 V/bit

  MESSAGE_THREE:
  same as message two

  MESSAGE_FOUR:
  byte 0 --> O2 sensor 1 --> .00390625 lambda / bit
  byte 1 --> O2 sensor 2 --> .00390625 lambda / bit
  bytes 2 and 3 --> vehicle speed --> .00390625 mph/ bit
  byte 4 --> gear calculated --> no scaling
  byte 5 --> ign timing --> .35156 deg/bit
  bytes 6 and 7 --> battery voltage --> .0002455 V/bit
*/

// declare message IDs
const int MESSAGE_ONE = 4294942720;
const int MESSAGE_TWO = 4294942721;
const int MESSAGE_THREE = 4294942722;
const int MESSAGE_FOUR = 4294942723;

// AEMNet sends all values as integers, which must be converted
// with a predetermined scale. These scales were obtained from
// AEM's documentation
const float RPM_SCALE = .39063;
const float BATT_VOLTAGE_SCALE = .0002455;

//unused, but maube for future:
//const float ENG_LOAD_SCALE = .0015259;
//const float ENG_THROTTLE_SCALE = .0015259;
//const float ANALOG_SCALE = .00007782;
//const float O2_SCALE = .00390625;
//const float SPEED_SCALE = .00390625;
//const float IGN_SCALE = .35156;

int8_t coolantC;
int rpm;
int coolantF;
double volts;

//unused, but maybe for future:
//double o2;
//double vehicleSpeed;
//byte gear;
//double load;

int oilPressure = 0;


//primary draw function (called every 50 ms in main loop)
void draw(void) {

  //dynamic math
  voltsInt = (int)volts/1;
  voltsDec = (int)((volts - (int)volts) * 100); //<<<<<<< UN-COMMENT FOR REAL DATA
  rpmWidth = rpm/27;

  //formatting dynamic variables
  snprintf (rpmStr, 10, "RPM: %d", rpm);
  snprintf (batteryVoltageStr, 16, "Battery: %0d.%dv", voltsInt, voltsDec);
  snprintf (coolantFStr, 15, "Coolant: %0dF", coolantF);
  snprintf (oilPressureStr, 11, "Oil: %0dpsi", oilPressure);

  //drawing variables
  // u8g.drawStr(168, 32, rpmStr); //align right
  u8g.drawStr(84, 32, rpmStr); //align center
  u8g.drawStr(121, 62, batteryVoltageStr);
  u8g.drawStr(0, 52, oilPressureStr);
  u8g.drawStr(0, 64, coolantFStr);

  //drawing rpm bar
  u8g.drawRBox(0, 2, rpmWidth, 16, 0); //dynamic

  //drawing static decorators
  u8g.drawRFrame(0, 0, 240, 20, 0);
  u8g.drawLine(0, 37, 240, 37);

}

void setup(void) {

  //setup for screen
  u8g.setFont(u8g_font_8x13B);

  // flip screen, if required
  // u8g.setRot180();
  
  // set SPI backup if required
  //u8g.setHardwareBackup(u8g_backup_avr_spi);

  // assign default color value
  // if ( u8g.getMode() == U8G_MODE_R3G3B2 ) {
  //   u8g.setColorIndex(255);     // white
  // }
  // else if ( u8g.getMode() == U8G_MODE_GRAY2BIT ) {
  //   u8g.setColorIndex(3);         // max intensity
  // }
  // else if ( u8g.getMode() == U8G_MODE_BW ) {
  //   u8g.setColorIndex(1);         // pixel on
  // }
  // else if ( u8g.getMode() == U8G_MODE_HICOLOR ) {
  //   u8g.setHiColorByRGB(255,255,255);
  // }
  
  // pinMode(8, OUTPUT);


  //setup for SparkFun

  /////////////////////
  //DANGER THIS STUFF BREAKS THE SCREEN FOR SOME REASON
  /////////////////////

  // Serial.begin(9600); // for debug use according to the library

  // //Initializing MCP2515 CAN controller at the specified speed
  // if (Canbus.init(CANSPEED_500)) {
  //   Serial.println("CAN Init ok");
  // }
  // else {
  //   Serial.println("Couldn't Init CAN");
  // }

  /////////////////////
  //END
  /////////////////////
  
  coolantC = 0;
  rpm = 0;
  //double load;
  coolantF = 0;
  //double o2;
  //double vehicleSpeed;
  //byte gear;
  volts = 0;



}

void loop(void) {
  
  //Reading variables from CAN and updating the values:
  tCAN message;

  /////////////////////
  //DANGER THIS STUFF BREAKS THE SCREEN FOR SOME REASON
  /////////////////////
  // if (mcp2515_get_message(&message)) {
  //   Serial.println("We found data");
  // }
  /////////////////////
  //END
  /////////////////////
  
  uint16_t rawRPM = (uint16_t)message.data[0] << 8;
  rawRPM |= message.data[1];
  rpm = (int)(rawRPM * RPM_SCALE);
  
  coolantC = message.data[7];
  coolantF = (int)((double)coolantC * 1.8) + 32;
  if(coolantF = 32){
    coolantF = 0;
  }

  uint16_t rawVolts = (uint16_t)message.data[7] << 8;
  rawVolts |= message.data[8];
  volts = rawVolts * BATT_VOLTAGE_SCALE;
  
  //unused, but maybe for future:
  // uint16_t rawLoad = (uint16_t)message.data[2] << 8;
  // rawLoad |= message.data[3];
  // load = rawLoad * ENG_LOAD_SCALE;
  
  // uint8_t rawo2 = (uint8_t)message.data[0];
  // o2 = rawo2 * O2_SCALE + 0.5;
  
  // uint16_t rawSpeed = (uint16_t)message.data[2] << 8;
  // rawSpeed |= message.data[3];
  // vehicleSpeed = rawSpeed * SPEED_SCALE;

  // gear = message.data[4];



  // picture loop
  u8g.firstPage();  
  do {
    draw();
  } while( u8g.nextPage() );

  //changing random numbers for funsies! (and testing ofc...)
  // rpm = int(random(5000, 6000));
  // voltsDec = random(60, 64);
  // coolantF = random(207, 209);
  // oilPressure = random(30, 33);

  // rebuild the picture after some delay
  delay(50);
}




//extra

//supposedly a 240x38 bitmap of usc racing logo...
const uint8_t uscRacingLogo_bitmap [] U8G_PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
	0x1f, 0xf0, 0x7f, 0xe0, 0x40, 0x00, 0x01, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x10, 0x00, 0x00, 
	0x40, 0x00, 0x01, 0x06, 0x00, 0x00, 0x08, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xe0, 
	0x7f, 0xe0, 0x80, 0x00, 0x03, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x10, 0x00, 0x00, 0x40, 0x00, 
	0x01, 0x06, 0x00, 0x00, 0x08, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xe0, 0x7f, 0xc0, 
	0x80, 0x00, 0x02, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x20, 0x00, 0x00, 0xc0, 0x00, 0x03, 0x04, 
	0x00, 0x00, 0x10, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x03, 0xf8, 0x3f, 0xe0, 0xff, 0xc0, 0x80, 0x00, 
	0x02, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x20, 0x00, 0x00, 0x80, 0x00, 0x02, 0x04, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x0f, 0xf0, 0x3f, 0xc0, 0xff, 0xc1, 0x80, 0x00, 0x02, 0x00, 
	0x00, 0x0f, 0xf8, 0x00, 0x00, 0x20, 0x00, 0x00, 0x80, 0x00, 0x02, 0x0c, 0x00, 0x00, 0x10, 0x00, 
	0x00, 0x7f, 0xff, 0xf8, 0x3e, 0x20, 0x3f, 0xc0, 0xff, 0xc1, 0x03, 0xff, 0xfc, 0x0f, 0xff, 0xff, 
	0xf0, 0x3f, 0xf0, 0x60, 0xff, 0xc0, 0x83, 0xff, 0xfe, 0x08, 0x1f, 0xf8, 0x30, 0x7f, 0xff, 0xff, 
	0xff, 0xf0, 0x38, 0x00, 0x3f, 0xc0, 0xff, 0x81, 0x00, 0x00, 0x04, 0x0f, 0xff, 0xff, 0xf0, 0x3f, 
	0xe0, 0x40, 0xff, 0x81, 0x03, 0xff, 0xfc, 0x08, 0x1f, 0xf8, 0x20, 0x60, 0x00, 0xff, 0xff, 0xf0, 
	0x73, 0xe0, 0x7f, 0xc1, 0xff, 0x81, 0x00, 0x00, 0x04, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x40, 
	0x00, 0x01, 0x03, 0xff, 0xfc, 0x08, 0x1f, 0xf0, 0x20, 0xc0, 0x00, 0xff, 0xff, 0xf0, 0x6f, 0xf0, 
	0x7f, 0x81, 0xff, 0x83, 0x00, 0x00, 0x0c, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x40, 0x00, 0x01, 
	0x07, 0xff, 0xfc, 0x18, 0x3f, 0xf0, 0x20, 0xc0, 0x00, 0xff, 0xff, 0xf0, 0x4f, 0x00, 0x7f, 0x81, 
	0xff, 0x82, 0x00, 0x00, 0x08, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0xc0, 0x00, 0x03, 0x07, 0xff, 
	0xfc, 0x10, 0x3f, 0xf0, 0x60, 0x80, 0x00, 0xff, 0xff, 0xe0, 0xdf, 0x00, 0x7f, 0x81, 0xff, 0x02, 
	0x00, 0x00, 0x08, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x80, 0x00, 0x02, 0x07, 0xff, 0xf8, 0x10, 
	0x3f, 0xf0, 0x40, 0x80, 0x01, 0xff, 0xff, 0xe0, 0x9f, 0x00, 0xff, 0x83, 0xff, 0x02, 0x00, 0x00, 
	0x08, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x20, 0x80, 0x00, 0x02, 0x07, 0xff, 0xf8, 0x10, 0x7f, 0xe0, 
	0x41, 0x80, 0x01, 0xff, 0xff, 0xe0, 0xbf, 0xf0, 0xff, 0x03, 0xff, 0x03, 0xff, 0xfc, 0x18, 0x3f, 
	0xff, 0xff, 0xe0, 0xc0, 0x3f, 0x83, 0xff, 0x02, 0x0f, 0xff, 0xf8, 0x30, 0x7f, 0xe0, 0x41, 0xff, 
	0x81, 0xff, 0xff, 0xc0, 0x3f, 0xf0, 0xff, 0x00, 0x00, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x7f, 
	0xc0, 0xe0, 0x0f, 0x03, 0xff, 0x06, 0x00, 0x00, 0x18, 0x20, 0x7f, 0xe0, 0x80, 0x00, 0x01, 0xff, 
	0xff, 0xc0, 0x00, 0x01, 0xff, 0x00, 0x00, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x7f, 0xc0, 0xf0, 
	0x03, 0x03, 0xff, 0x04, 0x00, 0x00, 0x10, 0x20, 0x7f, 0xe0, 0x80, 0x00, 0x03, 0xff, 0xff, 0xc0, 
	0x00, 0x01, 0xff, 0x00, 0x00, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x7f, 0xc1, 0xf8, 0x01, 0x07, 
	0xfe, 0x04, 0x00, 0x00, 0x10, 0x20, 0xff, 0xc0, 0x80, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x01, 
	0xfe, 0x00, 0x00, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x7f, 0x81, 0xfe, 0x01, 0x07, 0xfe, 0x04, 
	0x00, 0x00, 0x10, 0x40, 0xff, 0xc1, 0x80, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x01, 0xfe, 0x00, 
	0x00, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0xff, 0x81, 0xff, 0x03, 0x07, 0xfe, 0x0c, 0x00, 0x00, 
	0x30, 0x40, 0xff, 0xc1, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff
};
